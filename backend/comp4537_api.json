{
  "swagger": "2.0",
  "info": {
    "description": "This is the movie database for finding your favourite movies.",
    "version": "1.0.0",
    "title": "Movie Database"
  },
  "host": "young-u6.azurewebsites.net",
  "basePath": "/v1",
  "tags": [
    {
      "name": "movie",
      "description": "Everything about your favourite movies"
    },
    {
      "name": "actor",
      "description": "Find out more about your favourite actors"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }, 
    {
      "name": "review",
      "description": "Add your own review"
    },
    {
      "name": "cast",
      "description": "Find out who was in the movie."
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/movie": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Gets all movies from the database",
        "description": "",
        "operationId": "getMovies",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be added to the database",
            "required": true,
            "schema": {
              "type": "array",
              "items": {"$ref": "#/definitions/Movie"}
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:movies",
              "read:movies"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "movie"
        ],
        "summary": "Add a new movie to the database",
        "description": "",
        "operationId": "addMovie",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Movie object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:movies",
              "read:movies"
            ]
          }
        ]
      }
    },
    "/movie/genres/{genre}": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Finds Movies by Genre",
        "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
        "operationId": "findMoviesByGenre",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "genre",
            "in": "path",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:movies",
              "read:movies"
            ]
          }
        ]
      }
    },
    "/movie/{movieId}": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Find movie by ID",
        "description": "Returns a single movie",
        "operationId": "getMovieById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "movie"
        ],
        "summary": "Updates a movie in the database with form data",
        "description": "",
        "operationId": "updateMovieWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated title of the movie",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:movies",
              "read:movies"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "movie"
        ],
        "summary": "Deletes a movie",
        "description": "",
        "operationId": "deleteMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "movieId",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:movies",
              "read:movies"
            ]
          }
        ]
      }
    },
    "/actor": {
      "post": {
        "tags": [
          "actor"
        ],
        "summary": "Add a new actor to the database",
        "description": "",
        "operationId": "addActor",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Actor object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Actor"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:actors",
              "read:actors"
            ]
          }
        ]
      }
    },
    "/actor/{actorId}": {
      "get": {
        "tags": [
          "actor"
        ],
        "summary": "Find actor by ID",
        "description": "Returns a single actor",
        "operationId": "getActorById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of actor to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Actor"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Actor not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "actor"
        ],
        "summary": "Updates an actor's info in the database",
        "description": "",
        "operationId": "updateActorWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "ID of actor that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the actor",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:actors",
              "read:actors"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "actor"
        ],
        "summary": "Deletes an ctor",
        "description": "",
        "operationId": "deleteActor",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "Actor id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Actor not found"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:movies",
              "read:movies",
              "write:actors",
              "read:actors"
            ]
          }
        ]
      }
    },
      "/review": {
      "post": {
        "tags": [
          "review"
        ],
        "summary": "Add a new review to the database",
        "description": "",
        "operationId": "addReview",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Review to be added to the database",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Review"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:actors",
              "read:actors"
            ]
          }
        ]
      }
    },
    "/review/{reviewId}": {
      "get": {
        "tags": [
          "review"
        ],
        "summary": "Find review by ID",
        "description": "Returns a single review",
        "operationId": "getReviewById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "reviewId",
            "in": "path",
            "description": "ID of review to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Review"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Review not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "review"
        ],
        "summary": "Updates a review in the database",
        "description": "",
        "operationId": "updateReview",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "reviewId",
            "in": "path",
            "description": "ID of actor that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the actor",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:actors",
              "read:actors"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "review"
        ],
        "summary": "Deletes the review",
        "description": "",
        "operationId": "deleteReview",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "reviewId",
            "in": "path",
            "description": "Review id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Rview not found"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:movies",
              "read:movies"
            ]
          }
        ]
      }
    },
     "/cast": {
      "post": {
        "tags": [
          "cast"
        ],
        "summary": "Add a cast of a movie to the database",
        "description": "",
        "operationId": "addCast",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Cast to be added to the database",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cast"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "moviedb_auth": [
              "write:actors",
              "read:actors"
            ]
          }
        ]
      }
    },
    "/cast/{movieId}": {
      "get": {
        "tags": [
          "cast"
        ],
        "summary": "Find cast by ID",
        "description": "Returns a single review",
        "operationId": "getCastById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to get cast of",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Cast"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Cast not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/register": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This endpoint is used to for sending user info to the database.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "moviedb_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://https://young-u6.azurewebsites.net//oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:movies": "modify your favourite movies",
        "read:movies": "read your favourite movies",
        "write:actors": "modify your favourite actors",
        "read:actors": "read your favourite actors"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Cast": {
      "type": "object",
      "properties": {
        "movieId": {
          "type": "integer",
          "format": "int64"
        },
        "actorId": {
          "type": "integer",
          "format": "int64"
        },
        "role": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Cast"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Actor": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "fullname": {
          "type": "string",
          "example": "Christian Bale"
        },
        "year": {
          "type": "integer",
          "format": "int64"
        },
        "photoURL": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Actor"
      }
    },
    "Review": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "movieId": {
          "type": "integer",
          "format": "int64"
        },
        "comment": {
          "type": "string"
        },
        "rating": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Movie": {
      "type": "object",
      "required": [
        "title",
        "year",
        "actors"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "genre": {
          "type": "string",
          "example": "Action"
        },
        "title": {
          "type": "string",
          "example": "The Dark Knight"
        },
        "year": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Movie"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about the API",
    "url": "https://young-u6.azurewebsites.net/"
  }
}